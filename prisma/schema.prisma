generator client { 
     provider = "prisma-client-js" 
 } 
  
 datasource db { 
     provider = "mongodb" 
     url      = env("DATABASE_URL") 
 } 
  
 model User { 
     id             String    @id @default(auto()) @map("_id") @db.ObjectId 
     name           String? 
     email          String?   @unique 
     emailVerified  DateTime? 
     image          String?
     hashedPassword String? 
     createdAt      DateTime  @default(now()) 
     updatedAt      DateTime  @updatedAt 
     isAdmin        Boolean   @default(false) 
     Sponser        Sponser[] 
     Student        Student[] 
     Artist         Artist[] 
     Account        Account[] 
 } 
  
 model Account { 
     id                String  @id @default(auto()) @map("_id") @db.ObjectId 
     userId            String  @db.ObjectId 
     type              String 
     provider          String 
     providerAccountId String 
     refresh_token     String? @db.String 
     access_token      String? @db.String 
     expires_at        Int? 
     token_type        String? 
     scope             String? 
     id_token          String? @db.String 
     session_state     String? 
  
     user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  
     @@unique([provider, providerAccountId]) 
 } 
  
 model Sponser { 
     id             String   @id @default(auto()) @map("_id") @db.ObjectId 
     category       String 
     CompanyName    String 
     Address        String 
     Website        String? 
     SocialHandles  String? 
     Name           String 
     Designation    String 
     ContactNumber  String @unique
     OfficialEmail  String @unique
     AlternateEmail String? 
     Feedback       String? 
     createdAt      DateTime @default(now()) 
  
     User   User   @relation(fields: [userId], references: [id]) 
     userId String @db.ObjectId 
 } 
  
 model Student { 
     id             String   @id @default(auto()) @map("_id") @db.ObjectId 
     category       String 
     CollegeName    String 
     Address        String 
     Website        String? 
     SocialHandles  String? 
     Name           String 
     ContactNumber  String  @unique
     OfficialEmail  String  @unique
     AlternateEmail String? 
     Feedback       String? 
     createdAt      DateTime @default(now()) 
     
     Student   User   @relation(fields: [userId], references: [id]) 
     userId String @db.ObjectId 
 } 
  
 model Artist { 
     id             String   @id @default(auto()) @map("_id") @db.ObjectId 
     category       String 
     Name           String 
     OfficialEmail  String @unique
     AlternateEmail String? 
     ContactNumber  String @unique
     SocialHandles  String? 
     Feedback       String? 
     createdAt      DateTime @default(now()) 
  
     User   User   @relation(fields: [userId], references: [id]) 
     userId String @db.ObjectId 
 }